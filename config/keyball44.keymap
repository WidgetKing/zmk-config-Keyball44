#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <175>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        close-window {
            bindings = <&kp LA(F4)>;
            key-positions = <7 9>;
        };

        Mouseless {
            bindings = <&kt LC(LS(LA(F12)))>;
            key-positions = <16 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp GRAVE     &kp Q            &kp W               &kp E                           &kp R               &kp T                     &kp Y   &kp U                &kp I            &kp O                &kp P          &bootloader
&kp ESCAPE    &lt 4 A          &mt LEFT_CONTROL S  &mt LEFT_ALT D                  &mt LEFT_COMMAND F  &mt G GLOBE               &kp H   &mt RIGHT_COMMAND J  &mt RIGHT_ALT K  &mt RIGHT_CONTROL L  &kp BACKSPACE  &kp DEL
&kp LS(TAB)   &mt LC(Z) Z      &mt LC(X) X         &mt LC(C) C                     &mt LC(V) V         &kp B                     &kp N   &kp M                &kp COMMA        &kp DOT              &kp SLASH      &kp PRINTSCREEN
&kp C_VOL_DN  &kp C_VOLUME_UP  &kp LEFT_SHIFT      &mt LA(LS(LEFT_CONTROL)) SPACE  &kp ENTER                            &kp TAB  &tog 1                                                                            &none
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&trans        &mt F1 NUMBER_1  &mt F2 NUMBER_2         &mt NUMBER_3 F3     &mt F4 NUMBER_4       &mt F5 NUMBER_5              &mt F6 NUMBER_6  &mt F7 NUMBER_7  &mt F8 NUMBER_8   &mt F9 NUMBER_9    &mt F10 NUMBER_0   &kp F11
&trans        &kp SLASH        &mt LEFT_CONTROL EQUAL  &mt LEFT_ALT GRAVE  &mt LEFT_COMMAND SQT  &mt GLOBE HOME               &kt END          &kp MINUS        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &mt END SEMICOLON  &kp F12
&bt BT_CLR    &trans           &trans                  &trans              &trans                &trans                       &trans           &trans           &trans            &trans             &trans             &tog 0
&bt BT_SEL 0  &bt BT_SEL 1     &trans                  &trans              &trans                                     &trans  &tog 2                                                                                    &tog 0
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans            &trans        &trans            &trans                 &trans         &trans          &trans          &trans           &trans     &trans
&trans  &trans  &kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp GLOBE              &kp PAGE_UP    &mkp LCLK       &kp UP_ARROW    &mkp RCLK        &mkp MCLK  &trans
&trans  &trans  &trans            &trans        &trans            &trans                 &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans     &tog 0
&trans  &trans  &trans            &kp SPACE     &mo 3                            &trans  &trans                                                                     &tog 0
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &kp PAGE_UP     &trans        &trans          &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &kp PAGE_DOWN   &trans        &trans          &trans     &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                                           &trans
            >;
        };
    };
};
